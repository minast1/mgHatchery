{"ast":null,"code":"import _regeneratorRuntime from \"/home/lukatoni/Repositories/NextProjects/invoice-creator/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lukatoni/Repositories/NextProjects/invoice-creator/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport create from 'zustand';\nimport { supabase } from './supabaseClient';\nimport createContext from 'zustand/context';\n\nvar _createContext = createContext(),\n    Provider = _createContext.Provider,\n    useStore = _createContext.useStore;\n\nexport { Provider, useStore };\nexport var createStore = function createStore() {\n  return create(function (set, get) {\n    return {\n      authView: 'sign_in',\n      error: '',\n      email: '',\n      password: '',\n      session: null,\n      setSession: function setSession(user) {\n        return set(function (state) {\n          return {\n            session: user\n          };\n        });\n      },\n      message: '',\n      loading: false,\n      setAuthView: function setAuthView(to) {\n        return set(function (state) {\n          return {\n            authView: to\n          };\n        });\n      },\n      // setError: (to) => set(state => ({ error: to })),\n      setEmail: function setEmail(to) {\n        return set(function (state) {\n          return {\n            email: to.trim()\n          };\n        });\n      },\n      setPassword: function setPassword(to) {\n        return set(function (state) {\n          return {\n            password: to.trim()\n          };\n        });\n      },\n      handleSignIn: function () {\n        var _handleSignIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n          var email, password, _yield$supabase$auth$, AuthSession, signInError;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  event.preventDefault();\n                  set({\n                    error: ''\n                  });\n                  set({\n                    loading: true\n                  });\n                  email = get().email;\n                  password = get().password;\n                  _context.next = 7;\n                  return supabase.auth.signIn({\n                    email: email,\n                    password: password\n                  });\n\n                case 7:\n                  _yield$supabase$auth$ = _context.sent;\n                  AuthSession = _yield$supabase$auth$.session;\n                  signInError = _yield$supabase$auth$.error;\n                  if (signInError) set({\n                    error: signInError.message\n                  });\n                  set({\n                    loading: false\n                  });\n\n                  if (AuthSession) {\n                    set({\n                      session: AuthSession\n                    });\n                    window.location.replace(\"http://localhost:3000/Dashboard\");\n                  }\n\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function handleSignIn(_x) {\n          return _handleSignIn.apply(this, arguments);\n        }\n\n        return handleSignIn;\n      }(),\n      handleSignUp: function () {\n        var _handleSignUp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n          var email, password, _yield$supabase$auth$2, AuthSession, signUpError;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  event.preventDefault();\n                  set({\n                    error: ''\n                  });\n                  set({\n                    loading: true\n                  });\n                  email = get().email;\n                  password = get().password;\n                  _context2.next = 7;\n                  return supabase.auth.signUp({\n                    email: email,\n                    password: password\n                  });\n\n                case 7:\n                  _yield$supabase$auth$2 = _context2.sent;\n                  AuthSession = _yield$supabase$auth$2.session;\n                  signUpError = _yield$supabase$auth$2.error;\n                  if (signUpError) set({\n                    error: signUpError.message\n                  });\n                  set({\n                    loading: false\n                  });\n\n                  if (AuthSession) {\n                    set({\n                      session: AuthSession\n                    });\n                  }\n\n                case 13:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function handleSignUp(_x2) {\n          return _handleSignUp.apply(this, arguments);\n        }\n\n        return handleSignUp;\n      }(),\n      handlePasswordReset: function () {\n        var _handlePasswordReset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n          var email, _yield$supabase$auth$3, error;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  event.preventDefault();\n                  set({\n                    error: ''\n                  });\n                  set({\n                    loading: true\n                  });\n                  email = get().email;\n                  _context3.next = 6;\n                  return supabase.auth.api.resetPasswordForEmail(email);\n\n                case 6:\n                  _yield$supabase$auth$3 = _context3.sent;\n                  error = _yield$supabase$auth$3.error;\n                  if (error) set({\n                    error: error.message\n                  });else set({\n                    message: 'Check your email for the password reset link'\n                  });\n                  set({\n                    loading: false\n                  });\n\n                case 10:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        function handlePasswordReset(_x3) {\n          return _handlePasswordReset.apply(this, arguments);\n        }\n\n        return handlePasswordReset;\n      }()\n    };\n  });\n};","map":{"version":3,"sources":["/home/lukatoni/Repositories/NextProjects/invoice-creator/lib/store.ts"],"names":["create","supabase","createContext","Provider","useStore","createStore","set","get","authView","error","email","password","session","setSession","user","state","message","loading","setAuthView","to","setEmail","trim","setPassword","handleSignIn","event","preventDefault","auth","signIn","AuthSession","signInError","window","location","replace","handleSignUp","signUp","signUpError","handlePasswordReset","api","resetPasswordForEmail"],"mappings":"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","sourcesContent":["import { FormEvent } from 'react'\nimport create from 'zustand'\nimport { supabase } from './supabaseClient';\nimport createContext from 'zustand/context'\nimport { AuthSession } from '@supabase/supabase-js'\n\n\n\n\nexport const { Provider, useStore } = createContext<authContextState>();\n\n\nexport interface authContextState {\n     session: AuthSession | null\n    authView: string\n    setAuthView: (to: string) => void\n    email: string  \n    password: string\n    error: string\n    loading: boolean\n    message: string\n    setSession: (user:AuthSession)=> void\n    setEmail: (to: string) => void\n    setPassword: (to: string) => void\n   // setError: (to: string) => void\n    handleSignIn: (event: FormEvent) => void\n    handleSignUp: (event: FormEvent) => void\n    handlePasswordReset: (event:FormEvent) => void\n}\n\n\n\nexport const createStore = () => create<authContextState>((set,get) => ({\n    authView: 'sign_in',\n    error: '',\n    email: '',\n    password: '',\n    session: null,\n    setSession: (user) => set(state => ({session: user})),\n    message: '',\n    loading: false,\n    setAuthView: (to) => set(state => ({ authView: to })),\n   // setError: (to) => set(state => ({ error: to })),\n    setEmail: (to) => set(state => ({ email: to.trim() })),\n    setPassword: (to) => set(state => ({ password: to.trim() })),\n    handleSignIn: async (event) => {\n        event.preventDefault()\n        set({ error: '' })\n        set({ loading: true })\n        const email = get().email\n        const password = get().password\n        const {  session:AuthSession, error: signInError } = await supabase.auth.signIn({ email, password })\n        if (signInError) set({ error: signInError.message })\n\n        set({ loading: false })\n        if (AuthSession) {\n             set({session: AuthSession})\n            window.location.replace(\"http://localhost:3000/Dashboard\")\n        }\n    },\n    handleSignUp: async (event) => {\n        event.preventDefault()\n        set({ error: '' })\n        set({ loading: true })\n        const email = get().email\n        const password  = get().password\n        const { session:AuthSession, error: signUpError } = await supabase.auth.signUp({ email, password })\n        if (signUpError) set({ error: signUpError.message })\n        set({ loading: false })\n        if (AuthSession) {\n            set({session : AuthSession})\n        }\n    },\n    handlePasswordReset: async (event) => {\n        event.preventDefault()\n        set({ error: '' })\n        set({ loading: true })\n        const email = get().email\n        const { error } = await supabase.auth.api.resetPasswordForEmail(email)\n        if (error) set({ error: error.message })\n        else set({ message: 'Check your email for the password reset link' })\n        set({loading : false})\n    }\n}))"]},"metadata":{},"sourceType":"module"}