{"ast":null,"code":"import create from 'zustand';\nimport { supabase } from './supabaseClient';\nimport createContext from 'zustand/context';\nexport const {\n  Provider,\n  useStore\n} = createContext();\nexport const createStore = () => create((set, get) => ({\n  authView: 'sign_in',\n  error: '',\n  email: '',\n  password: '',\n  message: '',\n  loading: false,\n  setAuthView: to => set(state => ({\n    authView: to\n  })),\n  // setError: (to) => set(state => ({ error: to })),\n  setEmail: to => set(state => ({\n    email: to\n  })),\n  setPassword: to => set(state => ({\n    password: to\n  })),\n  handleSignIn: async event => {\n    event.preventDefault();\n    set({\n      error: ''\n    });\n    set({\n      loading: true\n    });\n    const email = get().email;\n    const password = get().password;\n    const {\n      error: signInError\n    } = await supabase.auth.signIn({\n      email,\n      password\n    });\n    if (signInError) set({\n      error: signInError.message\n    });\n    set({\n      loading: false\n    });\n  },\n  handleSignUp: async event => {\n    event.preventDefault();\n    set({\n      error: ''\n    });\n    set({\n      loading: true\n    });\n    const email = get().email;\n    const password = get().password;\n    const {\n      error: signUpError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (signUpError) set({\n      error: signUpError.message\n    });\n    set({\n      loading: false\n    });\n  },\n  handlePasswordReset: async event => {\n    event.preventDefault();\n    set({\n      error: ''\n    });\n    set({\n      loading: true\n    });\n    const email = get().email;\n    const {\n      error\n    } = await supabase.auth.api.resetPasswordForEmail(email);\n    if (error) set({\n      error: error.message\n    });else set({\n      message: 'Check your email for the password reset link'\n    });\n    set({\n      loading: false\n    });\n  }\n}));","map":{"version":3,"sources":["/home/lukatoni/Repositories/NextProjects/invoice-creator/lib/store.ts"],"names":["create","supabase","createContext","Provider","useStore","createStore","set","get","authView","error","email","password","message","loading","setAuthView","to","state","setEmail","setPassword","handleSignIn","event","preventDefault","signInError","auth","signIn","handleSignUp","signUpError","signUp","handlePasswordReset","api","resetPasswordForEmail"],"mappings":"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","sourcesContent":["import { FormEvent } from 'react'\nimport create from 'zustand'\nimport { supabase } from './supabaseClient';\nimport createContext from 'zustand/context'\n\nexport const { Provider, useStore } = createContext<authContextState>();\n export interface authContextState {\n    authView: string,\n    setAuthView: (to: string) => void\n    email: string  \n    password: string\n    error: string\n    loading: boolean\n    message: string\n\n    setEmail: (to: string) => void\n    setPassword: (to: string) => void\n   // setError: (to: string) => void\n    handleSignIn: (event: FormEvent) => void\n    handleSignUp: (event: FormEvent) => void\n    handlePasswordReset: (event:FormEvent) => void\n}\n\n\n\nexport const createStore = () => create<authContextState>((set,get) => ({\n    authView: 'sign_in',\n    error: '',\n    email: '',\n    password: '',\n    message: '',\n    loading: false,\n    setAuthView: (to) => set(state => ({ authView: to })),\n   // setError: (to) => set(state => ({ error: to })),\n    setEmail: (to) => set(state => ({ email: to })),\n    setPassword: (to) => set(state => ({ password: to })),\n    handleSignIn: async (event) => {\n        event.preventDefault()\n        set({ error: '' })\n        set({ loading: true })\n        const email = get().email\n        const password = get().password\n        const { error: signInError } = await supabase.auth.signIn({ email, password })\n        if (signInError) set({ error: signInError.message })\n        set({loading: false})\n    },\n    handleSignUp: async (event) => {\n        event.preventDefault()\n        set({ error: '' })\n        set({ loading: true })\n        const email = get().email\n        const password  = get().password\n        const { error: signUpError } = await supabase.auth.signUp({ email, password })\n        if (signUpError) set({ error: signUpError.message })\n        set({loading: false})\n    },\n    handlePasswordReset: async (event) => {\n        event.preventDefault()\n        set({ error: '' })\n        set({ loading: true })\n        const email = get().email\n        const { error } = await supabase.auth.api.resetPasswordForEmail(email)\n        if (error) set({ error: error.message })\n        else set({ message: 'Check your email for the password reset link' })\n        set({loading : false})\n    }\n}))"]},"metadata":{},"sourceType":"module"}