{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/lukatoni/Repositories/NextProjects/invoice-creator/components/ProfileList.tsx\";\nimport ProfileCard from '../components/ProfileCard';\nimport { supabase } from '../lib/supabaseClient';\nimport { useEffect, useReducer } from 'react';\n/**\n * Since we want this component to update in realtime,\n * we should use \"useReducer\" for sending Realtime events\n */\n\nconst handleDatabaseEvent = (state, action) => {\n  if (action.type === 'upsert') {\n    const otherProfiles = state.profiles.filter(x => x.id != action.payload.id);\n    return {\n      profiles: [action.payload, ...otherProfiles]\n    };\n  } else if (action.type === 'set') {\n    return {\n      profiles: action.payload\n    };\n  }\n\n  return {\n    profiles: []\n  };\n};\n\nexport default function ProfileList({\n  profiles\n}) {\n  var _state$profiles;\n\n  const initialState = {\n    profiles\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(handleDatabaseEvent, initialState);\n  useEffect(() => {\n    const subscription = supabase.from('profiles').on('*', payload => {\n      dispatch({\n        type: 'upsert',\n        payload: payload.new\n      });\n    }).subscribe();\n    return () => {\n      supabase.removeSubscription(subscription);\n    };\n  }, []);\n  useEffect(() => {\n    dispatch({\n      type: 'set',\n      payload: profiles\n    });\n  }, [profiles]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: state.profiles.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"opacity-half font-light m-0\",\n      children: \"There are no public profiles created yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profileList\",\n      children: (_state$profiles = state.profiles) === null || _state$profiles === void 0 ? void 0 : _state$profiles.map(profile => /*#__PURE__*/_jsxDEV(ProfileCard, {\n        profile: profile\n      }, profile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/home/lukatoni/Repositories/NextProjects/invoice-creator/components/ProfileList.tsx"],"names":["ProfileCard","supabase","useEffect","useReducer","handleDatabaseEvent","state","action","type","otherProfiles","profiles","filter","x","id","payload","ProfileList","initialState","dispatch","subscription","from","on","new","subscribe","removeSubscription","length","map","profile"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,2BAAxB;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AAEA;AACA;AACA;AACA;;AAaA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAkC;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAMC,aAAa,GAAGH,KAAK,CAACI,QAAN,CAAeC,MAAf,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,IAAQN,MAAM,CAACO,OAAP,CAAeD,EAApD,CAAtB;AACA,WAAO;AACLH,MAAAA,QAAQ,EAAE,CAACH,MAAM,CAACO,OAAR,EAAiB,GAAGL,aAApB;AADL,KAAP;AAGD,GALD,MAKO,IAAIF,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AAChC,WAAO;AACLE,MAAAA,QAAQ,EAAEH,MAAM,CAACO;AADZ,KAAP;AAGD;;AACD,SAAO;AAAEJ,IAAAA,QAAQ,EAAE;AAAZ,GAAP;AACD,CAZD;;AAcA,eAAe,SAASK,WAAT,CAAqB;AAAEL,EAAAA;AAAF,CAArB,EAAqD;AAAA;;AAClE,QAAMM,YAAmB,GAAG;AAAEN,IAAAA;AAAF,GAA5B;AACA,QAAM;AAAA,OAACJ,KAAD;AAAA,OAAQW;AAAR,MAAoBb,UAAU,CAACC,mBAAD,EAAsBW,YAAtB,CAApC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,YAAY,GAAGhB,QAAQ,CAC1BiB,IADkB,CACb,UADa,EAElBC,EAFkB,CAEf,GAFe,EAETN,OAAD,IAAa;AACpBG,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,QAAR;AAAkBM,QAAAA,OAAO,EAAEA,OAAO,CAACO;AAAnC,OAAD,CAAR;AACD,KAJkB,EAKlBC,SALkB,EAArB;AAOA,WAAO,MAAM;AACXpB,MAAAA,QAAQ,CAACqB,kBAAT,CAA4BL,YAA5B;AACD,KAFD;AAGD,GAXQ,EAWN,EAXM,CAAT;AAaAf,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAAC;AAAET,MAAAA,IAAI,EAAE,KAAR;AAAeM,MAAAA,OAAO,EAAEJ;AAAxB,KAAD,CAAR;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA,sBACE;AAAA,cACGJ,KAAK,CAACI,QAAN,CAAec,MAAf,KAA0B,CAA1B,gBACC;AAAG,MAAA,SAAS,EAAC,6BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,mCACGlB,KAAK,CAACI,QADT,oDACG,gBAAgBe,GAAhB,CAAqBC,OAAD,iBACnB,QAAC,WAAD;AAAa,QAAA,OAAO,EAAEA;AAAtB,SAAoCA,OAAO,CAACb,EAA5C;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAaD","sourcesContent":["import ProfileCard from '../components/ProfileCard'\nimport { Profile } from '../lib/constants'\nimport { supabase } from '../lib/supabaseClient'\nimport { useEffect, useReducer } from 'react'\n\n/**\n * Since we want this component to update in realtime,\n * we should use \"useReducer\" for sending Realtime events\n */\n\ntype State = {\n  profiles: Profile[]\n}\ntype Action = {\n  type?: string\n  payload: any\n}\ntype ProfileListProps = {\n  profiles: Profile[]\n}\n\nconst handleDatabaseEvent = (state: State, action: Action) => {\n  if (action.type === 'upsert') {\n    const otherProfiles = state.profiles.filter((x) => x.id != action.payload.id)\n    return {\n      profiles: [action.payload, ...otherProfiles],\n    }\n  } else if (action.type === 'set') {\n    return {\n      profiles: action.payload,\n    }\n  }\n  return { profiles: [] }\n}\n\nexport default function ProfileList({ profiles }: ProfileListProps) {\n  const initialState: State = { profiles }\n  const [state, dispatch] = useReducer(handleDatabaseEvent, initialState)\n\n  useEffect(() => {\n    const subscription = supabase\n      .from('profiles')\n      .on('*', (payload) => {\n        dispatch({ type: 'upsert', payload: payload.new })\n      })\n      .subscribe()\n\n    return () => {\n      supabase.removeSubscription(subscription)\n    }\n  }, [])\n\n  useEffect(() => {\n    dispatch({ type: 'set', payload: profiles })\n  }, [profiles])\n\n  return (\n    <>\n      {state.profiles.length === 0 ? (\n        <p className=\"opacity-half font-light m-0\">There are no public profiles created yet</p>\n      ) : (\n        <div className=\"profileList\">\n          {state.profiles?.map((profile: any) => (\n            <ProfileCard profile={profile} key={profile.id} />\n          ))}\n        </div>\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}